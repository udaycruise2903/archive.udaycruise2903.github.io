<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Haskell Programming From First Principles</title>
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
</head>
<body>
<div id="content" class="content">
<h1 class="title">Haskell Programming From First Principles</h1>

<div id="outline-container-orgb89f652" class="outline-2">
<h2 id="orgb89f652">Preface</h2>
<div class="outline-text-2" id="text-orgb89f652">
<ol class="org-ol">
<li>Configure hexchat or irrsi in emacs to access #haskell-beginners freenode channel</li>
<li>Spaced repetition and iterative deepening are effective strategies of learning.</li>
<li>Solving exercises and returning to concepts can help develop intuition.</li>
<li>Reason through the code samples and exercises in your head first, then type them out - either in REPL or in Source file.</li>
<li>If you are stuck in a exercise for an extended period of time than come back later.</li>
<li>All modern functional languages are based on lambda calculus.</li>
<li>Solving the same problem in different ways increases your fluency and comfort with the way haskell works</li>
<li>Writing yo6ur own thought processes can clarify your thoughts and make the solving of similar problems easier.</li>
</ol>
</div>
</div>

<div id="outline-container-orga7ee411" class="outline-2">
<h2 id="orga7ee411">Chapter 1 - All you need is lambda</h2>
<div class="outline-text-2" id="text-orga7ee411">
<ol class="org-ol">
<li>In the Lambda expression - λx.x and λx.xa</li>
<li>.x is called bound variable, a is called free variable.</li>
<li>λx is called head and xa is called body.</li>
<li>Beta-reduction - eliminating the head λx as its main purpose was to bind to a variable.</li>
<li>Divergence - when x is substituted in λx.x then we get the same expression, thus it is in non-reducible form.</li>
</ol>
</div>
</div>

<div id="outline-container-orgbe014d9" class="outline-2">
<h2 id="orgbe014d9">Chapter 2 - Hello Haskell</h2>
<div class="outline-text-2" id="text-orgbe014d9">
<ol class="org-ol">
<li>Reducible expressions are called redexes. Ex: 1+1</li>
<li>Currying -  applying a series of nested functions, each to an argument.</li>
<li><p>
Haskell evaluates to weak head normal form by default. ex: (f -&gt; (1, 2+f)) 2
</p>
<div class="org-src-container">
<pre class="src src-haskell">(1  , 2 + 2)
</pre>
</div>
<p>
2+2 is not evaluated until the last possible moment.
</p></li>

<li>Module names are capitalised. camelCase is used for variable names</li>
<li>2 + 2 is a reducible expression. 4 is a value(irreducible constant).</li>
<li>modulo 12 is used for a 12 hour clock. 12 is equivalent to both itself and 0.</li>
<li>$ allows everything on the right of expression to be evaluated first.</li>
<li>Ex: (+1) 2. (+1) is called sectioning and allows us to pass</li>
</ol>
</div>
</div>

<div id="outline-container-org261b054" class="outline-2">
<h2 id="org261b054">Chapter 3 - Strings</h2>
<div class="outline-text-2" id="text-org261b054">
<ol class="org-ol">
<li>concat :: -&gt; [a]</li>
<li><p>
Prelude has functions with exceptions:
</p>
<div class="org-src-container">
<pre class="src src-haskell">head ""
"" !! 4
</pre>
</div></li>
</ol>
</div>
</div>

<div id="outline-container-orgb236dc1" class="outline-2">
<h2 id="orgb236dc1">Chapter 4 - Basic Datatypes</h2>
<div class="outline-text-2" id="text-orgb236dc1">
<ol class="org-ol">
<li>Int size has a min and max range. Integer size depends on the system.</li>
<li>floating point can shift how many bits it uses to represent numbers before or after the decimal point.(DO NOT USE IN BUSINESS APPLICATIONS.)</li>
<li>In the case of Integer, and most numeric datatypes, these data constructors are not written out because they include an infinite series of whole numbers. We would need infinite  data constructors stretching up from zero.</li>
<li>Num typeclass is a superclass of fractional typeclass.</li>
<li><p>
values of Fractional a =&gt; a default to the floating point doucble. It is better to use arbitrary precision sibling to Integer.
</p>
<div class="org-src-container">
<pre class="src src-haskell">4 / 2
</pre>
</div></li>
<li>x /= 5. (/=) symbol means <b>not equal to</b>.</li>
<li>Ord typeclass has lexicographic ordering. ex: Chris &lt; Julie</li>
<li>Scope is a way to refer to where a named binding to an expression is valid.</li>
<li>#+begin<sub>src</sub> haskell
data (,) a b
#+end<sub>src</sub></li>
<li>[char] - String, [a] - List</li>
</ol>
</div>
</div>

<div id="outline-container-org3c3e520" class="outline-2">
<h2 id="org3c3e520">Chapter 5 - Types</h2>
<div class="outline-text-2" id="text-org3c3e520">
<ol class="org-ol">
<li>(-&gt;) is an infix operator and right associative.</li>
</ol>
<p>
ex:
</p>
<div class="org-src-container">
<pre class="src src-haskell">f :: a -&gt; a -&gt; a
-- associates to
f :: a -&gt; (a -&gt; a)
</pre>
</div>
<ol class="org-ol">
<li>function applicative is left associative. So, the leftmost or outermost arguments are evaluated first.</li>
<li>Int can make use of the Num and Integral typeclasses because it has instances of both.</li>
<li>Haskell's type inference is built on Damas-Hindley-Milner type system.</li>
<li>#+begin<sub>src</sub> haskell
f 1 2
f :: Num a =&gt; a -&gt; a -&gt; a
:t f 1
f 1 :: Num a =&gt; a -&gt; a
#+end<sub>src</sub></li>
<li></li>
</ol>
</div>
</div>

<div id="outline-container-org2d25020" class="outline-2">
<h2 id="org2d25020">Chapter 11 - Algebraic Datatypes</h2>
<div class="outline-text-2" id="text-org2d25020">
<ol class="org-ol">
<li>Type constructors are used only in Type Signatures, Data constructors are used at term level.</li>
<li>Type and data constructors that take no arguments are constants. In the context of type constructor, its type signature is a concrete type.
ex: data PugType = pugData</li>
<li>:kind - to check the kind of a type.</li>
<li>Bool and [Int] are fully applied, concrete types, so their kind signatures have no function arrows.</li>
<li>an empty list has to be applied to a concrete type before it is itself a concrete type.
:k []
<ul class="org-ul">
<li>-&gt; *</li>
</ul></li>
</ol>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="date">Date: 2022-06-26 Sun 00:00</p>
<p class="creator"><a href="https://www.gnu.org/software/emacs/">Emacs</a> 28.1 (<a href="https://orgmode.org">Org</a> mode 9.5.2)</p>
</div>
</body>
</html>
